Lynda: Learning Python Web Penetration Testing

Penetration Testing methodology

Reconnaissance:
Gather information to undentify technologies used. Software configuration, load balances, etc...

Mapping:
We build application pages and functionalities
We aim to undertify components and their relationship
Spidering or Crawling one of the techinics to do it
Discovering non-linked resouces by perfoming brute force attack

Vulnerability Discovery

Exploitation:
And depending on the scope of the pen test, once you exploit a vulnerability, you can start the process all over again from your new vantage point

Reporting:
present all reports and documents to your customer

Black box test vs White box test
Without and with docs and source code

Areas to test:
Configuration and deployment management testing, 
Identity management testing, 
Authentication testing, 
Authorization testing, 
Session management testing, 
Input validation, 
Testing error handling, 
Cryptography, 
Business logic testing, 
Client side testing.

Tools used by professionals
HTTP proxy
This tool allows you to intercept all the communication between the browser and the server in both directions. These proxies are called man-in-the-middle proxies.
Usially run on the same machine as the browser used for testing

Most used proxies:
Burp Suit
Zed attack known as Zap
Mitmproxy - developed with Pythin cli only

Crawlers and spiders:
Scrappy
httrack
wget

Vulnerability scanners:
Ussualy most complex as they include a crawler, discovery tools, vulnerability DB and exploitation plugins
w3af
arachni
acunetix

Brute Forcers or Discovery Tools
Allow us to find files, directories, servlets or parameters through dictionary attack
DIRB
FUZZDB - word list used by another 2 apps
Wfuzz


HTTP protocol
Hyper text transfer protocol - designed to enable communication between client and server
TCP/IP based
Media independent - any kind of data can be send
Stateless - client and server aware of the state duering request transaction only

http/1.0
http/1.1

Usually port 80

All communications are passed as clear text

https introduced in 1994 
https = http over SSL and later over TLS
usually port 443

Http methods
HTTP/1.0: HEAD, GET, POST
HTTP/1.1: OPTIONS, PUT, DELETE, TRACE, PATCH and CONNECT
HEAD, GET, OPTIONS and TRACE - only for information retrival
POST, PUT, DELETE, PATCH - Can create side effect

Headers are a core part of HTTP requests and responses. They describe how the client and the server talk to each other and also provide information about the transaction

Client side headers:
User-agent
Accept-language
Concept-Type
Accept-encoding - usually gzip oor
Host
Referer
Cookie - if we have cookies, browser will add them to the Cookie header

Server headers:
Cache-Control
Content-Type
Custom Headers
Location
Set-Cookie
WWW-Authenticate - used by the server to request authentication

Telnet Connection:
telnet www.httpbin.org 80
GET /ip HTTP/1.0
GET /redirect-to?url=http://www.bing.com HTTP/1.0

Writing python code to make a request
use request library
urllib2 can be used but request library is much simpler

get request with python and request

import request
r = requesr.get('http://www.httpbin.org/ip')
print r.text

Section 3

Web Crawling with Scrapy
What is Web Application mapping?
Building map/catalog of application components
Extract interesting information from application like emails, forms, ect...

one technic to use spidering/crawling 
use proxy to identify links that were generated with JS
discovering non linked resources with brute force attack

create scrapy project 
scrapy startproject basic_crawler
scrapy crawl basic_crawler -o books.json -type json 


Section 4

Resource discovery

Dictionary attack
Brute forcing
Fuzzing

What can we find
files, notes, scripts
directories
Actions
Servlets
Parameters

fuzzdb - most used dictionary

Building brute forcer
refer to forzabrute.py for basic bruteforcer
python forzabruta.py -w http://scruffybank.com/FUZZ -t 5 -f common.txt
python forzabruta-2.py -w http://scruffybank.com/FUZZ -t 5 -f common.txt // to see color coded responces
// add -c parameter to hide response like -c 404
// to add md5
// we can filter by file type by adding FUZZ.filetime, commons - bigger dictionary
python forzabruta-3.py -w http://scruffybank.com/FUZZ.php -t 5 -f commons.txt
// adding screenshot
seleniumhq
PhantomJS - headless browser
python forzabruta-4.py -w http://scruffybank.com/FUZZ.php -t 5 -f commons.txt

// things to consider
add a filtering
add a recursive for directories

Section 5

// Password cracking
most common brute force attack
Based on dictionary of well known common used passwords
Also include variation of these passwords like replacing o -> 0 i -> 1 etc
// Diffirent approaches
- Vertical scanning (username/all passwords)
Horizontal scanning (diffirent username for commin passwords)
Diagonal scanning (diff usernames/password each round)
Tree Dimensions (Horizontal, Vertical or Dioganal + Distributing source IP)  // to prevent detection
Four Dimension (Horizontal, Vertical or Dioganal + time delay + source IP)


// Password policies 
Keep them in mind - not to lock thousands of accounts

// Password brute forcer
- Basic authentication 
implemented by sending HTTP headers and not secure
Credentials encoded with Base64
if string ends with = there is a chance that is a Base64 encoding

First password bruteforser - similar to previous bruteforcer

In previous step we found directory returned 401 - which is authentication request
lets run our brutforcer against it.
python back2basics.py -w http://www.scruffybank.com/Admin -u admin -t 5 -f pass.txt

// Adding support for digest authentications
- More secure option to basic authentication
- uses md5 + nonce
nonce - used to prevent replay attacks
use /backoffice we found in robots.txt
check headers and look at WWW-Authenticat, there should be nonce parameter and algorithm=MD5
Try diffirent users like administrator and admin
python back2digest.py -w http://www.scruffybank.com/backoffice -u admin -t 5 -f pass.txt -m digest

// Form based authentication
most common method, not standartialised 
use forzaBruta-forms.py
Chearch for the form in the source code and textfield names for login and password
-p payload - query string
python forzaBruta-forms.py -w http://scruffybank.com/check_login.php -t 5 -f pass.txt -p "username=admin&password=FUZZ"
all responces are 302 so we need to filter by chars - for some reason I get 413 error
Code was updated so re-run it with -c parameter 
python forzaBruta-forms.py -w http://scruffybank.com/check_login.php -t 5 -f pass.txt -p "username=admin&password=FUZZ" -c 2373
should return valid code and password

Section 6

// SQL injections
SQLi vs Blind SQLi
Input manipulation vunerability
Attacker can 
- Extract data
- Insert data in DB
- Bypass authentication, Authorization controls
- Control the server by executing OS commands

' or '1'='1

if application is vunerable to SQLi but result is not visible to the attacker = Blind SQLi
If no result is visible we can still exploit the SQLi in a blind way:
- Boolean
- Time based

Methods to detect SQLi:
- Error based - inject payload to brake a quiry and inspect a error message
- Boolean - injects payload which alter original query
- Time based - injects payload to trigger delay 

python SQLinjector-0.py -w "http://www.scruffybank.com/users.php?id=FUZZ&Submit=Submit#" -i injections.txt
to find out number of columns using order by technic
add to the browser bar:
http://www.scruffybank.com/users.php?id=a' order by 3--'&Submit=Submit#
Use group by to find a column name, need to add name dictionary
http://www.scruffybank.com/users.php?id=a' group by passwd--'&Submit=Submit#
Will tell namber of columns and names
python SQLinjector-0.py -w "http://www.scruffybank.com/users.php?id=FUZZ&Submit=Submit#" -i injections.txt

What can we extract:
- basic data: DB version, User running DB, Current DB
- Advanced: Mysql user/pass, DB's, table names, Column names, content from tables
- OS file - as long as user have priveledges

Refer to pentestmonkey cheatsheet - for multiple databases

to obtain version and current user
python SQLinjector-2.py -w "http://www.scruffybank.com/users.php?id=FUZZ&Submit=Submit#" -i injections.txt

obtain table names:
python SQLinjector-3.py -w "http://www.scruffybank.com/users.php?id=FUZZ&Submit=Submit#" -i injections.txt

to read os files:
python SQLinjector-4.py -w "http://www.scruffybank.com/users.php?id=FUZZ&Submit=Submit#" -i injections.txt
something doesn't work for me

Sectio 7

// Http proxy
Type of proxies
- forward proxies
- reverse proxies
- transparent proxies

// Introduction mitmproxy
mitmproxy - command line program 
- easier and faster to learn
- Python
- Inline scripts
- Support SSL

run mitmproxy:
mitmproxy
change FF settings -> advanced -> network -> connection settings -> manual proxy configuration
load www.edge-security.com
check requests in terminal
select request - press enter
to edit press e
to send press r

check - mitmproxy.org


Inline script handlers
- start
- clientconnect
- request
- serverconnect
- responseheaders
- response
- error
- clientdisconnect
- done

mitm-0.py
mitmproxy -s mitm-0.py 
open browser and change proxy conf as in prev lesson
load required website
exit and httplogs.txt should be created - all urls requested within the session
in mitm-1.py save only unique urls

mitm-2.py
add a parameter to a query string


Automating SQLi in mitmproxy
to test for SQLi for each url parameter
mitm-3.py
mitmproxy -s mitm-3.py
check for created txt file


// practice
OWASP WebGoat
Pentester lab
OWASP WADP






